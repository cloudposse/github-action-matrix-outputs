name: 'Example composite GitHub action'
description: 'Example composite GitHub action'
author: hello@cloudposse.com
branding:
  icon: 'file'
  color: 'white'
inputs:
  matrix-step-name:
    required: false
    description: "Matrix step name"
  matrix-key:
    required: false
    description: "Matrix key"
  write:
    required: false
    description: "Write YAML structured map of outputs"
  read:
    required: false
    description: "Read YAML structured map of outputs"
outputs:
  result:
    description: "Outputs result"
    value: "${{ steps.context.outputs.result }}"
runs:
  using: "composite"
  steps:
    - name: 'Setup jq'
      uses: dcarbone/install-jq-action@v1.0.0
      with:
        version: 1.5
        force: 'true'

    - shell: bash
      run:
        echo '${{ toJson(github) }}'

    - shell: bash
      run:
        echo '${{ toJson(job) }}'

    - shell: bash
      run:
        echo '${{ toJson(runner) }}'

    - uses: cloudposse/github-action-yaml-config-query@0.1.0
      if: ${{ inputs.read == '' }}
      id: write
      with:
        query: .
        config: |-
          result:
            ${{ inputs.matrix-key }}:
              ${{ inputs.write }}

    - shell: bash
      if: ${{ inputs.read == '' }}
      run: |
        echo '${{ steps.write.outputs.result }}' > ${{ inputs.matrix-step-name }}
      id: matrix

    - uses: actions/upload-artifact@v3
      if: ${{ inputs.read == '' }}
      with:
        name: ${{ hashFiles('matrix') || 'none' }}
        path: ${{ inputs.matrix-step-name }}
        if-no-files-found: warn

    - uses: actions/download-artifact@v3
      if: ${{ inputs.read != '' }}
    - shell: bash
      if: ${{ inputs.read != '' }}
      run: |
        matrix=$(
          cat */${{ inputs.matrix-step-name }} | \ 
          jq -c --slurp 'map(to_entries | map(.key as $matrix_key | .value | map_values({($matrix_key): .}))) | flatten | reduce .[] as $item ({}; . * $item)' 
        )
        echo "::set-output name=result::$matrix"
      id: context

